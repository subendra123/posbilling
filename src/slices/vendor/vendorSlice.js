import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchVendors } from './apis';

/**
 * Initial vendorSlice State 
 */
const initialState = {
    value: [],
    selected: null,
    status: 'idle',
};

/**
 * Function to handle the async request to fetch the vendors from the server
 */
export const fetchVendorsAsync = createAsyncThunk(
    'vendor/fetchVendors',
    async () => {
        const response = await fetchVendors();
        return response.data;
    }
);


/**
 * Creating vendorSice to handle the vendors state
 */
const vendorSlice = createSlice({
    name: 'vendor',
    initialState,
    reducers: {
        select: (state, action) => {
            state.selected = action.payload.vendor;
        },
    },
    // lets handle actions generated by createAsyncThunk or in other slices.
    // with the extra reducers
    extraReducers: (builder) => {
        builder
            .addCase(fetchVendorsAsync.pending, (state) => {
                state.status = 'fetching';
            })
            .addCase(fetchVendorsAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value = action.payload;
            });
    },
});


/**
 * Exporting the actions from the vendorSlice
 */
export const { select } = vendorSlice.actions;

/**
 * This will be used to select the value from the state in the component using the useSelector hook
 * @param {*} state 
 * @returns 
 */
export const selectVendors = (state) => state.vendor.value;
export const selectSelectedVendor = (state) => state.vendor.selected;

/**
 * FInally Exporting the reducer from the vendorSlice
 */
export default vendorSlice.reducer;
