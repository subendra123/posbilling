import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchProducts } from './apis';


/**
 * Initial productSlice State 
 */
const initialState = {
    value: [],
    selected: null,
    status: 'idle',
};

/**
 * Function to handle the async request to fetch the products from the server
 */
export const fetchProductsAsync = createAsyncThunk(
    'product/fetchProducts',
    async () => {
        const response = await fetchProducts();
        return response.data;
    }
);


/**
 * Creating productSlice to handle the products state
 */
const productSlice = createSlice({
    name: 'product',
    initialState,
    reducers: {
        select: (state, action) => {
            state.selected = action.payload.product;
        },
    },
    // lets handle actions generated by createAsyncThunk or in other slices.
    // with the extra reducers
    extraReducers: (builder) => {
        builder
            .addCase(fetchProductsAsync.pending, (state) => {
                state.status = 'fetching';
            })
            .addCase(fetchProductsAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value = action.payload;
            });
    },
});


/**
 * Exporting the actions from the productSlice
 */
export const { select } = productSlice.actions;

/**
 * This will be used to select the value from the state in the component using the useSelector hook
 * @param {*} state 
 * @returns 
 */
export const selectProducts = (state) => state.product.value;
export const selectSelectedProduct = (state) => state.product.selected;
export const selectProductLoadingStatus = (state) => state.product.status;

/**
 * FInally Exporting the reducer from the productSlice
 */
export default productSlice.reducer;
